// source: aruba-iot-nb-telemetry.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var aruba$iot$types_pb = require('./aruba-iot-types_pb.js');
goog.object.extend(proto, aruba$iot$types_pb);
goog.exportSymbol('proto.aruba_telemetry.AccelStatus', null, global);
goog.exportSymbol('proto.aruba_telemetry.Accelerometer', null, global);
goog.exportSymbol('proto.aruba_telemetry.Alarm', null, global);
goog.exportSymbol('proto.aruba_telemetry.BeaconEvent', null, global);
goog.exportSymbol('proto.aruba_telemetry.Beacons', null, global);
goog.exportSymbol('proto.aruba_telemetry.Cell', null, global);
goog.exportSymbol('proto.aruba_telemetry.CellEvent', null, global);
goog.exportSymbol('proto.aruba_telemetry.Contact', null, global);
goog.exportSymbol('proto.aruba_telemetry.ContactPosition', null, global);
goog.exportSymbol('proto.aruba_telemetry.EddyUID', null, global);
goog.exportSymbol('proto.aruba_telemetry.EddyURL', null, global);
goog.exportSymbol('proto.aruba_telemetry.Eddystone', null, global);
goog.exportSymbol('proto.aruba_telemetry.Firmware', null, global);
goog.exportSymbol('proto.aruba_telemetry.History', null, global);
goog.exportSymbol('proto.aruba_telemetry.Ibeacon', null, global);
goog.exportSymbol('proto.aruba_telemetry.Inputs', null, global);
goog.exportSymbol('proto.aruba_telemetry.MechanicalH', null, global);
goog.exportSymbol('proto.aruba_telemetry.Occupancy', null, global);
goog.exportSymbol('proto.aruba_telemetry.Reported', null, global);
goog.exportSymbol('proto.aruba_telemetry.RockerSwitch', null, global);
goog.exportSymbol('proto.aruba_telemetry.Rssi', null, global);
goog.exportSymbol('proto.aruba_telemetry.Sensors', null, global);
goog.exportSymbol('proto.aruba_telemetry.Stats', null, global);
goog.exportSymbol('proto.aruba_telemetry.VendorData', null, global);
goog.exportSymbol('proto.aruba_telemetry.rockerSwitchPosition', null, global);
goog.exportSymbol('proto.aruba_telemetry.switchState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Firmware = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.Firmware, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Firmware.displayName = 'proto.aruba_telemetry.Firmware';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.History = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.History, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.History.displayName = 'proto.aruba_telemetry.History';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Rssi = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aruba_telemetry.Rssi.repeatedFields_, null);
};
goog.inherits(proto.aruba_telemetry.Rssi, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Rssi.displayName = 'proto.aruba_telemetry.Rssi';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.BeaconEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.BeaconEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.BeaconEvent.displayName = 'proto.aruba_telemetry.BeaconEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Cell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.Cell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Cell.displayName = 'proto.aruba_telemetry.Cell';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Ibeacon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.Ibeacon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Ibeacon.displayName = 'proto.aruba_telemetry.Ibeacon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.EddyUID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.EddyUID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.EddyUID.displayName = 'proto.aruba_telemetry.EddyUID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.EddyURL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.EddyURL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.EddyURL.displayName = 'proto.aruba_telemetry.EddyURL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Eddystone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.Eddystone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Eddystone.displayName = 'proto.aruba_telemetry.Eddystone';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Beacons = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.Beacons, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Beacons.displayName = 'proto.aruba_telemetry.Beacons';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Accelerometer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.Accelerometer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Accelerometer.displayName = 'proto.aruba_telemetry.Accelerometer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.RockerSwitch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.RockerSwitch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.RockerSwitch.displayName = 'proto.aruba_telemetry.RockerSwitch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Contact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.Contact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Contact.displayName = 'proto.aruba_telemetry.Contact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Occupancy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.Occupancy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Occupancy.displayName = 'proto.aruba_telemetry.Occupancy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Sensors = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aruba_telemetry.Sensors.repeatedFields_, null);
};
goog.inherits(proto.aruba_telemetry.Sensors, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Sensors.displayName = 'proto.aruba_telemetry.Sensors';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Stats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.Stats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Stats.displayName = 'proto.aruba_telemetry.Stats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Inputs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aruba_telemetry.Inputs.repeatedFields_, null);
};
goog.inherits(proto.aruba_telemetry.Inputs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Inputs.displayName = 'proto.aruba_telemetry.Inputs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.VendorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aruba_telemetry.VendorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.VendorData.displayName = 'proto.aruba_telemetry.VendorData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aruba_telemetry.Reported = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aruba_telemetry.Reported.repeatedFields_, null);
};
goog.inherits(proto.aruba_telemetry.Reported, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aruba_telemetry.Reported.displayName = 'proto.aruba_telemetry.Reported';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Firmware.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Firmware.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Firmware} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Firmware.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    banka: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    bankb: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Firmware}
 */
proto.aruba_telemetry.Firmware.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Firmware;
  return proto.aruba_telemetry.Firmware.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Firmware} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Firmware}
 */
proto.aruba_telemetry.Firmware.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBanka(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBankb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Firmware.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Firmware.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Firmware} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Firmware.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.aruba_telemetry.Firmware.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.Firmware} returns this
 */
proto.aruba_telemetry.Firmware.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Firmware} returns this
 */
proto.aruba_telemetry.Firmware.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Firmware.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string bankA = 2;
 * @return {string}
 */
proto.aruba_telemetry.Firmware.prototype.getBanka = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.Firmware} returns this
 */
proto.aruba_telemetry.Firmware.prototype.setBanka = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Firmware} returns this
 */
proto.aruba_telemetry.Firmware.prototype.clearBanka = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Firmware.prototype.hasBanka = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string bankB = 3;
 * @return {string}
 */
proto.aruba_telemetry.Firmware.prototype.getBankb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.Firmware} returns this
 */
proto.aruba_telemetry.Firmware.prototype.setBankb = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Firmware} returns this
 */
proto.aruba_telemetry.Firmware.prototype.clearBankb = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Firmware.prototype.hasBankb = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.History.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.History.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.History} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.History.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    rssi: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    rxradioid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    antenna: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.History}
 */
proto.aruba_telemetry.History.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.History;
  return proto.aruba_telemetry.History.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.History} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.History}
 */
proto.aruba_telemetry.History.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setRssi(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRxradioid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAntenna(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.History.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.History.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.History} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.History.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required uint64 time = 1;
 * @return {number}
 */
proto.aruba_telemetry.History.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.History} returns this
 */
proto.aruba_telemetry.History.prototype.setTime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.History} returns this
 */
proto.aruba_telemetry.History.prototype.clearTime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.History.prototype.hasTime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required sint32 rssi = 2;
 * @return {number}
 */
proto.aruba_telemetry.History.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.History} returns this
 */
proto.aruba_telemetry.History.prototype.setRssi = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.History} returns this
 */
proto.aruba_telemetry.History.prototype.clearRssi = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.History.prototype.hasRssi = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 rxRadioId = 3;
 * @return {number}
 */
proto.aruba_telemetry.History.prototype.getRxradioid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.History} returns this
 */
proto.aruba_telemetry.History.prototype.setRxradioid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.History} returns this
 */
proto.aruba_telemetry.History.prototype.clearRxradioid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.History.prototype.hasRxradioid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 antenna = 4;
 * @return {number}
 */
proto.aruba_telemetry.History.prototype.getAntenna = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.History} returns this
 */
proto.aruba_telemetry.History.prototype.setAntenna = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.History} returns this
 */
proto.aruba_telemetry.History.prototype.clearAntenna = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.History.prototype.hasAntenna = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aruba_telemetry.Rssi.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Rssi.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Rssi.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Rssi} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Rssi.toObject = function(includeInstance, msg) {
  var f, obj = {
    last: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    avg: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    max: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    historyList: jspb.Message.toObjectList(msg.getHistoryList(),
    proto.aruba_telemetry.History.toObject, includeInstance),
    smooth: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Rssi}
 */
proto.aruba_telemetry.Rssi.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Rssi;
  return proto.aruba_telemetry.Rssi.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Rssi} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Rssi}
 */
proto.aruba_telemetry.Rssi.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLast(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setAvg(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setMax(value);
      break;
    case 4:
      var value = new proto.aruba_telemetry.History;
      reader.readMessage(value,proto.aruba_telemetry.History.deserializeBinaryFromReader);
      msg.addHistory(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setSmooth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Rssi.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Rssi.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Rssi} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Rssi.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeSint32(
      3,
      f
    );
  }
  f = message.getHistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.aruba_telemetry.History.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeSint32(
      5,
      f
    );
  }
};


/**
 * optional sint32 last = 1;
 * @return {number}
 */
proto.aruba_telemetry.Rssi.prototype.getLast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Rssi} returns this
 */
proto.aruba_telemetry.Rssi.prototype.setLast = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Rssi} returns this
 */
proto.aruba_telemetry.Rssi.prototype.clearLast = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Rssi.prototype.hasLast = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint32 avg = 2;
 * @return {number}
 */
proto.aruba_telemetry.Rssi.prototype.getAvg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Rssi} returns this
 */
proto.aruba_telemetry.Rssi.prototype.setAvg = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Rssi} returns this
 */
proto.aruba_telemetry.Rssi.prototype.clearAvg = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Rssi.prototype.hasAvg = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional sint32 max = 3;
 * @return {number}
 */
proto.aruba_telemetry.Rssi.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Rssi} returns this
 */
proto.aruba_telemetry.Rssi.prototype.setMax = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Rssi} returns this
 */
proto.aruba_telemetry.Rssi.prototype.clearMax = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Rssi.prototype.hasMax = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated History history = 4;
 * @return {!Array<!proto.aruba_telemetry.History>}
 */
proto.aruba_telemetry.Rssi.prototype.getHistoryList = function() {
  return /** @type{!Array<!proto.aruba_telemetry.History>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.aruba_telemetry.History, 4));
};


/**
 * @param {!Array<!proto.aruba_telemetry.History>} value
 * @return {!proto.aruba_telemetry.Rssi} returns this
*/
proto.aruba_telemetry.Rssi.prototype.setHistoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.aruba_telemetry.History=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aruba_telemetry.History}
 */
proto.aruba_telemetry.Rssi.prototype.addHistory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.aruba_telemetry.History, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aruba_telemetry.Rssi} returns this
 */
proto.aruba_telemetry.Rssi.prototype.clearHistoryList = function() {
  return this.setHistoryList([]);
};


/**
 * optional sint32 smooth = 5;
 * @return {number}
 */
proto.aruba_telemetry.Rssi.prototype.getSmooth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Rssi} returns this
 */
proto.aruba_telemetry.Rssi.prototype.setSmooth = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Rssi} returns this
 */
proto.aruba_telemetry.Rssi.prototype.clearSmooth = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Rssi.prototype.hasSmooth = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.BeaconEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.BeaconEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.BeaconEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.BeaconEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.BeaconEvent}
 */
proto.aruba_telemetry.BeaconEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.BeaconEvent;
  return proto.aruba_telemetry.BeaconEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.BeaconEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.BeaconEvent}
 */
proto.aruba_telemetry.BeaconEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.aruba_telemetry.CellEvent} */ (reader.readEnum());
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.BeaconEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.BeaconEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.BeaconEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.BeaconEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.aruba_telemetry.CellEvent} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional CellEvent event = 1;
 * @return {!proto.aruba_telemetry.CellEvent}
 */
proto.aruba_telemetry.BeaconEvent.prototype.getEvent = function() {
  return /** @type {!proto.aruba_telemetry.CellEvent} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.aruba_telemetry.CellEvent} value
 * @return {!proto.aruba_telemetry.BeaconEvent} returns this
 */
proto.aruba_telemetry.BeaconEvent.prototype.setEvent = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.BeaconEvent} returns this
 */
proto.aruba_telemetry.BeaconEvent.prototype.clearEvent = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.BeaconEvent.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Cell.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Cell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Cell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Cell.toObject = function(includeInstance, msg) {
  var f, obj = {
    isinside: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    distance: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Cell}
 */
proto.aruba_telemetry.Cell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Cell;
  return proto.aruba_telemetry.Cell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Cell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Cell}
 */
proto.aruba_telemetry.Cell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsinside(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Cell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Cell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Cell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Cell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional bool isInside = 1;
 * @return {boolean}
 */
proto.aruba_telemetry.Cell.prototype.getIsinside = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.aruba_telemetry.Cell} returns this
 */
proto.aruba_telemetry.Cell.prototype.setIsinside = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Cell} returns this
 */
proto.aruba_telemetry.Cell.prototype.clearIsinside = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Cell.prototype.hasIsinside = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float distance = 2;
 * @return {number}
 */
proto.aruba_telemetry.Cell.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Cell} returns this
 */
proto.aruba_telemetry.Cell.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Cell} returns this
 */
proto.aruba_telemetry.Cell.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Cell.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Ibeacon.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Ibeacon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Ibeacon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Ibeacon.toObject = function(includeInstance, msg) {
  var f, obj = {
    uuid: msg.getUuid_asB64(),
    major: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    minor: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    power: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    extra: msg.getExtra_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Ibeacon}
 */
proto.aruba_telemetry.Ibeacon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Ibeacon;
  return proto.aruba_telemetry.Ibeacon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Ibeacon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Ibeacon}
 */
proto.aruba_telemetry.Ibeacon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMajor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinor(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPower(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtra(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Ibeacon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Ibeacon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Ibeacon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Ibeacon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * required bytes uuid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.aruba_telemetry.Ibeacon.prototype.getUuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes uuid = 1;
 * This is a type-conversion wrapper around `getUuid()`
 * @return {string}
 */
proto.aruba_telemetry.Ibeacon.prototype.getUuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUuid()));
};


/**
 * required bytes uuid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUuid()`
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Ibeacon.prototype.getUuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUuid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.aruba_telemetry.Ibeacon} returns this
 */
proto.aruba_telemetry.Ibeacon.prototype.setUuid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Ibeacon} returns this
 */
proto.aruba_telemetry.Ibeacon.prototype.clearUuid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Ibeacon.prototype.hasUuid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 major = 2;
 * @return {number}
 */
proto.aruba_telemetry.Ibeacon.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Ibeacon} returns this
 */
proto.aruba_telemetry.Ibeacon.prototype.setMajor = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Ibeacon} returns this
 */
proto.aruba_telemetry.Ibeacon.prototype.clearMajor = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Ibeacon.prototype.hasMajor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 minor = 3;
 * @return {number}
 */
proto.aruba_telemetry.Ibeacon.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Ibeacon} returns this
 */
proto.aruba_telemetry.Ibeacon.prototype.setMinor = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Ibeacon} returns this
 */
proto.aruba_telemetry.Ibeacon.prototype.clearMinor = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Ibeacon.prototype.hasMinor = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required sint32 power = 4;
 * @return {number}
 */
proto.aruba_telemetry.Ibeacon.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Ibeacon} returns this
 */
proto.aruba_telemetry.Ibeacon.prototype.setPower = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Ibeacon} returns this
 */
proto.aruba_telemetry.Ibeacon.prototype.clearPower = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Ibeacon.prototype.hasPower = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes extra = 5;
 * @return {!(string|Uint8Array)}
 */
proto.aruba_telemetry.Ibeacon.prototype.getExtra = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes extra = 5;
 * This is a type-conversion wrapper around `getExtra()`
 * @return {string}
 */
proto.aruba_telemetry.Ibeacon.prototype.getExtra_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtra()));
};


/**
 * optional bytes extra = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtra()`
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Ibeacon.prototype.getExtra_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtra()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.aruba_telemetry.Ibeacon} returns this
 */
proto.aruba_telemetry.Ibeacon.prototype.setExtra = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Ibeacon} returns this
 */
proto.aruba_telemetry.Ibeacon.prototype.clearExtra = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Ibeacon.prototype.hasExtra = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.EddyUID.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.EddyUID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.EddyUID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.EddyUID.toObject = function(includeInstance, msg) {
  var f, obj = {
    nid: msg.getNid_asB64(),
    bid: msg.getBid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.EddyUID}
 */
proto.aruba_telemetry.EddyUID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.EddyUID;
  return proto.aruba_telemetry.EddyUID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.EddyUID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.EddyUID}
 */
proto.aruba_telemetry.EddyUID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.EddyUID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.EddyUID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.EddyUID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.EddyUID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required bytes nid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.aruba_telemetry.EddyUID.prototype.getNid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes nid = 1;
 * This is a type-conversion wrapper around `getNid()`
 * @return {string}
 */
proto.aruba_telemetry.EddyUID.prototype.getNid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNid()));
};


/**
 * required bytes nid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNid()`
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.EddyUID.prototype.getNid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.aruba_telemetry.EddyUID} returns this
 */
proto.aruba_telemetry.EddyUID.prototype.setNid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.EddyUID} returns this
 */
proto.aruba_telemetry.EddyUID.prototype.clearNid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.EddyUID.prototype.hasNid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes bid = 2;
 * @return {!(string|Uint8Array)}
 */
proto.aruba_telemetry.EddyUID.prototype.getBid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes bid = 2;
 * This is a type-conversion wrapper around `getBid()`
 * @return {string}
 */
proto.aruba_telemetry.EddyUID.prototype.getBid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBid()));
};


/**
 * required bytes bid = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBid()`
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.EddyUID.prototype.getBid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.aruba_telemetry.EddyUID} returns this
 */
proto.aruba_telemetry.EddyUID.prototype.setBid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.EddyUID} returns this
 */
proto.aruba_telemetry.EddyUID.prototype.clearBid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.EddyUID.prototype.hasBid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.EddyURL.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.EddyURL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.EddyURL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.EddyURL.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    encodedurl: msg.getEncodedurl_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.EddyURL}
 */
proto.aruba_telemetry.EddyURL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.EddyURL;
  return proto.aruba_telemetry.EddyURL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.EddyURL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.EddyURL}
 */
proto.aruba_telemetry.EddyURL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrefix(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncodedurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.EddyURL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.EddyURL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.EddyURL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.EddyURL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required uint32 prefix = 1;
 * @return {number}
 */
proto.aruba_telemetry.EddyURL.prototype.getPrefix = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.EddyURL} returns this
 */
proto.aruba_telemetry.EddyURL.prototype.setPrefix = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.EddyURL} returns this
 */
proto.aruba_telemetry.EddyURL.prototype.clearPrefix = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.EddyURL.prototype.hasPrefix = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes encodedUrl = 2;
 * @return {!(string|Uint8Array)}
 */
proto.aruba_telemetry.EddyURL.prototype.getEncodedurl = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes encodedUrl = 2;
 * This is a type-conversion wrapper around `getEncodedurl()`
 * @return {string}
 */
proto.aruba_telemetry.EddyURL.prototype.getEncodedurl_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncodedurl()));
};


/**
 * required bytes encodedUrl = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncodedurl()`
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.EddyURL.prototype.getEncodedurl_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncodedurl()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.aruba_telemetry.EddyURL} returns this
 */
proto.aruba_telemetry.EddyURL.prototype.setEncodedurl = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.EddyURL} returns this
 */
proto.aruba_telemetry.EddyURL.prototype.clearEncodedurl = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.EddyURL.prototype.hasEncodedurl = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Eddystone.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Eddystone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Eddystone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Eddystone.toObject = function(includeInstance, msg) {
  var f, obj = {
    power: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    uid: (f = msg.getUid()) && proto.aruba_telemetry.EddyUID.toObject(includeInstance, f),
    url: (f = msg.getUrl()) && proto.aruba_telemetry.EddyURL.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Eddystone}
 */
proto.aruba_telemetry.Eddystone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Eddystone;
  return proto.aruba_telemetry.Eddystone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Eddystone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Eddystone}
 */
proto.aruba_telemetry.Eddystone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPower(value);
      break;
    case 2:
      var value = new proto.aruba_telemetry.EddyUID;
      reader.readMessage(value,proto.aruba_telemetry.EddyUID.deserializeBinaryFromReader);
      msg.setUid(value);
      break;
    case 3:
      var value = new proto.aruba_telemetry.EddyURL;
      reader.readMessage(value,proto.aruba_telemetry.EddyURL.deserializeBinaryFromReader);
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Eddystone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Eddystone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Eddystone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Eddystone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getUid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.aruba_telemetry.EddyUID.serializeBinaryToWriter
    );
  }
  f = message.getUrl();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.aruba_telemetry.EddyURL.serializeBinaryToWriter
    );
  }
};


/**
 * optional sint32 power = 1;
 * @return {number}
 */
proto.aruba_telemetry.Eddystone.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Eddystone} returns this
 */
proto.aruba_telemetry.Eddystone.prototype.setPower = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Eddystone} returns this
 */
proto.aruba_telemetry.Eddystone.prototype.clearPower = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Eddystone.prototype.hasPower = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EddyUID uid = 2;
 * @return {?proto.aruba_telemetry.EddyUID}
 */
proto.aruba_telemetry.Eddystone.prototype.getUid = function() {
  return /** @type{?proto.aruba_telemetry.EddyUID} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.EddyUID, 2));
};


/**
 * @param {?proto.aruba_telemetry.EddyUID|undefined} value
 * @return {!proto.aruba_telemetry.Eddystone} returns this
*/
proto.aruba_telemetry.Eddystone.prototype.setUid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Eddystone} returns this
 */
proto.aruba_telemetry.Eddystone.prototype.clearUid = function() {
  return this.setUid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Eddystone.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EddyURL url = 3;
 * @return {?proto.aruba_telemetry.EddyURL}
 */
proto.aruba_telemetry.Eddystone.prototype.getUrl = function() {
  return /** @type{?proto.aruba_telemetry.EddyURL} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.EddyURL, 3));
};


/**
 * @param {?proto.aruba_telemetry.EddyURL|undefined} value
 * @return {!proto.aruba_telemetry.Eddystone} returns this
*/
proto.aruba_telemetry.Eddystone.prototype.setUrl = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Eddystone} returns this
 */
proto.aruba_telemetry.Eddystone.prototype.clearUrl = function() {
  return this.setUrl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Eddystone.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Beacons.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Beacons.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Beacons} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Beacons.toObject = function(includeInstance, msg) {
  var f, obj = {
    ibeacon: (f = msg.getIbeacon()) && proto.aruba_telemetry.Ibeacon.toObject(includeInstance, f),
    eddystone: (f = msg.getEddystone()) && proto.aruba_telemetry.Eddystone.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Beacons}
 */
proto.aruba_telemetry.Beacons.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Beacons;
  return proto.aruba_telemetry.Beacons.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Beacons} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Beacons}
 */
proto.aruba_telemetry.Beacons.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.aruba_telemetry.Ibeacon;
      reader.readMessage(value,proto.aruba_telemetry.Ibeacon.deserializeBinaryFromReader);
      msg.setIbeacon(value);
      break;
    case 2:
      var value = new proto.aruba_telemetry.Eddystone;
      reader.readMessage(value,proto.aruba_telemetry.Eddystone.deserializeBinaryFromReader);
      msg.setEddystone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Beacons.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Beacons.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Beacons} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Beacons.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIbeacon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.aruba_telemetry.Ibeacon.serializeBinaryToWriter
    );
  }
  f = message.getEddystone();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.aruba_telemetry.Eddystone.serializeBinaryToWriter
    );
  }
};


/**
 * optional Ibeacon ibeacon = 1;
 * @return {?proto.aruba_telemetry.Ibeacon}
 */
proto.aruba_telemetry.Beacons.prototype.getIbeacon = function() {
  return /** @type{?proto.aruba_telemetry.Ibeacon} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.Ibeacon, 1));
};


/**
 * @param {?proto.aruba_telemetry.Ibeacon|undefined} value
 * @return {!proto.aruba_telemetry.Beacons} returns this
*/
proto.aruba_telemetry.Beacons.prototype.setIbeacon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Beacons} returns this
 */
proto.aruba_telemetry.Beacons.prototype.clearIbeacon = function() {
  return this.setIbeacon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Beacons.prototype.hasIbeacon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Eddystone eddystone = 2;
 * @return {?proto.aruba_telemetry.Eddystone}
 */
proto.aruba_telemetry.Beacons.prototype.getEddystone = function() {
  return /** @type{?proto.aruba_telemetry.Eddystone} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.Eddystone, 2));
};


/**
 * @param {?proto.aruba_telemetry.Eddystone|undefined} value
 * @return {!proto.aruba_telemetry.Beacons} returns this
*/
proto.aruba_telemetry.Beacons.prototype.setEddystone = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Beacons} returns this
 */
proto.aruba_telemetry.Beacons.prototype.clearEddystone = function() {
  return this.setEddystone(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Beacons.prototype.hasEddystone = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Accelerometer.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Accelerometer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Accelerometer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Accelerometer.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Accelerometer}
 */
proto.aruba_telemetry.Accelerometer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Accelerometer;
  return proto.aruba_telemetry.Accelerometer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Accelerometer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Accelerometer}
 */
proto.aruba_telemetry.Accelerometer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    case 4:
      var value = /** @type {!proto.aruba_telemetry.AccelStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Accelerometer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Accelerometer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Accelerometer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Accelerometer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {!proto.aruba_telemetry.AccelStatus} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * required float x = 1;
 * @return {number}
 */
proto.aruba_telemetry.Accelerometer.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Accelerometer} returns this
 */
proto.aruba_telemetry.Accelerometer.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Accelerometer} returns this
 */
proto.aruba_telemetry.Accelerometer.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Accelerometer.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float y = 2;
 * @return {number}
 */
proto.aruba_telemetry.Accelerometer.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Accelerometer} returns this
 */
proto.aruba_telemetry.Accelerometer.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Accelerometer} returns this
 */
proto.aruba_telemetry.Accelerometer.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Accelerometer.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float z = 3;
 * @return {number}
 */
proto.aruba_telemetry.Accelerometer.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Accelerometer} returns this
 */
proto.aruba_telemetry.Accelerometer.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Accelerometer} returns this
 */
proto.aruba_telemetry.Accelerometer.prototype.clearZ = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Accelerometer.prototype.hasZ = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AccelStatus status = 4;
 * @return {!proto.aruba_telemetry.AccelStatus}
 */
proto.aruba_telemetry.Accelerometer.prototype.getStatus = function() {
  return /** @type {!proto.aruba_telemetry.AccelStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.aruba_telemetry.AccelStatus} value
 * @return {!proto.aruba_telemetry.Accelerometer} returns this
 */
proto.aruba_telemetry.Accelerometer.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Accelerometer} returns this
 */
proto.aruba_telemetry.Accelerometer.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Accelerometer.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.RockerSwitch.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.RockerSwitch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.RockerSwitch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.RockerSwitch.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    state: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.RockerSwitch}
 */
proto.aruba_telemetry.RockerSwitch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.RockerSwitch;
  return proto.aruba_telemetry.RockerSwitch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.RockerSwitch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.RockerSwitch}
 */
proto.aruba_telemetry.RockerSwitch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.aruba_telemetry.rockerSwitchPosition} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.RockerSwitch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.RockerSwitch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.RockerSwitch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.RockerSwitch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.aruba_telemetry.rockerSwitchPosition} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * required string id = 1;
 * @return {string}
 */
proto.aruba_telemetry.RockerSwitch.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.RockerSwitch} returns this
 */
proto.aruba_telemetry.RockerSwitch.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.RockerSwitch} returns this
 */
proto.aruba_telemetry.RockerSwitch.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.RockerSwitch.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required rockerSwitchPosition state = 2;
 * @return {!proto.aruba_telemetry.rockerSwitchPosition}
 */
proto.aruba_telemetry.RockerSwitch.prototype.getState = function() {
  return /** @type {!proto.aruba_telemetry.rockerSwitchPosition} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.aruba_telemetry.rockerSwitchPosition} value
 * @return {!proto.aruba_telemetry.RockerSwitch} returns this
 */
proto.aruba_telemetry.RockerSwitch.prototype.setState = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.RockerSwitch} returns this
 */
proto.aruba_telemetry.RockerSwitch.prototype.clearState = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.RockerSwitch.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Contact.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Contact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Contact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Contact.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    state: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Contact}
 */
proto.aruba_telemetry.Contact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Contact;
  return proto.aruba_telemetry.Contact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Contact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Contact}
 */
proto.aruba_telemetry.Contact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.aruba_telemetry.ContactPosition} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Contact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Contact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Contact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Contact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!proto.aruba_telemetry.ContactPosition} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * required uint32 id = 1;
 * @return {number}
 */
proto.aruba_telemetry.Contact.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Contact} returns this
 */
proto.aruba_telemetry.Contact.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Contact} returns this
 */
proto.aruba_telemetry.Contact.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Contact.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required ContactPosition state = 2;
 * @return {!proto.aruba_telemetry.ContactPosition}
 */
proto.aruba_telemetry.Contact.prototype.getState = function() {
  return /** @type {!proto.aruba_telemetry.ContactPosition} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/**
 * @param {!proto.aruba_telemetry.ContactPosition} value
 * @return {!proto.aruba_telemetry.Contact} returns this
 */
proto.aruba_telemetry.Contact.prototype.setState = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Contact} returns this
 */
proto.aruba_telemetry.Contact.prototype.clearState = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Contact.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Occupancy.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Occupancy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Occupancy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Occupancy.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Occupancy}
 */
proto.aruba_telemetry.Occupancy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Occupancy;
  return proto.aruba_telemetry.Occupancy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Occupancy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Occupancy}
 */
proto.aruba_telemetry.Occupancy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Occupancy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Occupancy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Occupancy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Occupancy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 level = 1;
 * @return {number}
 */
proto.aruba_telemetry.Occupancy.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Occupancy} returns this
 */
proto.aruba_telemetry.Occupancy.prototype.setLevel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Occupancy} returns this
 */
proto.aruba_telemetry.Occupancy.prototype.clearLevel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Occupancy.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aruba_telemetry.Sensors.repeatedFields_ = [14,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Sensors.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Sensors.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Sensors} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Sensors.toObject = function(includeInstance, msg) {
  var f, obj = {
    accelerometer: (f = msg.getAccelerometer()) && proto.aruba_telemetry.Accelerometer.toObject(includeInstance, f),
    battery: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    temperaturec: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    humidity: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    voltage: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    illumination: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    motion: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    current: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    co: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    co2: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    voc: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    resistance: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    pressure: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    alarmList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    contactList: jspb.Message.toObjectList(msg.getContactList(),
    proto.aruba_telemetry.Contact.toObject, includeInstance),
    occupancy: (f = msg.getOccupancy()) && proto.aruba_telemetry.Occupancy.toObject(includeInstance, f),
    mechanicalhandle: (f = jspb.Message.getField(msg, 17)) == null ? undefined : f,
    distance: (f = jspb.Message.getField(msg, 18)) == null ? undefined : f,
    capacitance: (f = jspb.Message.getOptionalFloatingPointField(msg, 19)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Sensors}
 */
proto.aruba_telemetry.Sensors.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Sensors;
  return proto.aruba_telemetry.Sensors.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Sensors} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Sensors}
 */
proto.aruba_telemetry.Sensors.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.aruba_telemetry.Accelerometer;
      reader.readMessage(value,proto.aruba_telemetry.Accelerometer.deserializeBinaryFromReader);
      msg.setAccelerometer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBattery(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperaturec(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHumidity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltage(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIllumination(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMotion(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setCurrent(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCo(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCo2(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVoc(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setResistance(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setPressure(value);
      break;
    case 14:
      var values = /** @type {!Array<!proto.aruba_telemetry.Alarm>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAlarm(values[i]);
      }
      break;
    case 15:
      var value = new proto.aruba_telemetry.Contact;
      reader.readMessage(value,proto.aruba_telemetry.Contact.deserializeBinaryFromReader);
      msg.addContact(value);
      break;
    case 16:
      var value = new proto.aruba_telemetry.Occupancy;
      reader.readMessage(value,proto.aruba_telemetry.Occupancy.deserializeBinaryFromReader);
      msg.setOccupancy(value);
      break;
    case 17:
      var value = /** @type {!proto.aruba_telemetry.MechanicalH} */ (reader.readEnum());
      msg.setMechanicalhandle(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDistance(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCapacitance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Sensors.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Sensors.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Sensors} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Sensors.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccelerometer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.aruba_telemetry.Accelerometer.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeSint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeSint32(
      13,
      f
    );
  }
  f = message.getAlarmList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      14,
      f
    );
  }
  f = message.getContactList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.aruba_telemetry.Contact.serializeBinaryToWriter
    );
  }
  f = message.getOccupancy();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.aruba_telemetry.Occupancy.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.aruba_telemetry.MechanicalH} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeFloat(
      19,
      f
    );
  }
};


/**
 * optional Accelerometer accelerometer = 1;
 * @return {?proto.aruba_telemetry.Accelerometer}
 */
proto.aruba_telemetry.Sensors.prototype.getAccelerometer = function() {
  return /** @type{?proto.aruba_telemetry.Accelerometer} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.Accelerometer, 1));
};


/**
 * @param {?proto.aruba_telemetry.Accelerometer|undefined} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
*/
proto.aruba_telemetry.Sensors.prototype.setAccelerometer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearAccelerometer = function() {
  return this.setAccelerometer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasAccelerometer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 battery = 2;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getBattery = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setBattery = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearBattery = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasBattery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float temperatureC = 3;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getTemperaturec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setTemperaturec = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearTemperaturec = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasTemperaturec = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 humidity = 4;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getHumidity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setHumidity = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearHumidity = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasHumidity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float voltage = 5;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setVoltage = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearVoltage = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasVoltage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 illumination = 6;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getIllumination = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setIllumination = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearIllumination = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasIllumination = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool motion = 7;
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.getMotion = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setMotion = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearMotion = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasMotion = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional sint32 current = 8;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setCurrent = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearCurrent = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasCurrent = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 CO = 9;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getCo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setCo = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearCo = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasCo = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int32 CO2 = 10;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getCo2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setCo2 = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearCo2 = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasCo2 = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int32 VOC = 11;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getVoc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setVoc = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearVoc = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasVoc = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float resistance = 12;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getResistance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setResistance = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearResistance = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasResistance = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional sint32 pressure = 13;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setPressure = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearPressure = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasPressure = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated Alarm alarm = 14;
 * @return {!Array<!proto.aruba_telemetry.Alarm>}
 */
proto.aruba_telemetry.Sensors.prototype.getAlarmList = function() {
  return /** @type {!Array<!proto.aruba_telemetry.Alarm>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<!proto.aruba_telemetry.Alarm>} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setAlarmList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {!proto.aruba_telemetry.Alarm} value
 * @param {number=} opt_index
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.addAlarm = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearAlarmList = function() {
  return this.setAlarmList([]);
};


/**
 * repeated Contact contact = 15;
 * @return {!Array<!proto.aruba_telemetry.Contact>}
 */
proto.aruba_telemetry.Sensors.prototype.getContactList = function() {
  return /** @type{!Array<!proto.aruba_telemetry.Contact>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.aruba_telemetry.Contact, 15));
};


/**
 * @param {!Array<!proto.aruba_telemetry.Contact>} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
*/
proto.aruba_telemetry.Sensors.prototype.setContactList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.aruba_telemetry.Contact=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aruba_telemetry.Contact}
 */
proto.aruba_telemetry.Sensors.prototype.addContact = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.aruba_telemetry.Contact, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearContactList = function() {
  return this.setContactList([]);
};


/**
 * optional Occupancy occupancy = 16;
 * @return {?proto.aruba_telemetry.Occupancy}
 */
proto.aruba_telemetry.Sensors.prototype.getOccupancy = function() {
  return /** @type{?proto.aruba_telemetry.Occupancy} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.Occupancy, 16));
};


/**
 * @param {?proto.aruba_telemetry.Occupancy|undefined} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
*/
proto.aruba_telemetry.Sensors.prototype.setOccupancy = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearOccupancy = function() {
  return this.setOccupancy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasOccupancy = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional MechanicalH mechanicalHandle = 17;
 * @return {!proto.aruba_telemetry.MechanicalH}
 */
proto.aruba_telemetry.Sensors.prototype.getMechanicalhandle = function() {
  return /** @type {!proto.aruba_telemetry.MechanicalH} */ (jspb.Message.getFieldWithDefault(this, 17, 1));
};


/**
 * @param {!proto.aruba_telemetry.MechanicalH} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setMechanicalhandle = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearMechanicalhandle = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasMechanicalhandle = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional int32 distance = 18;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setDistance = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearDistance = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasDistance = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional float capacitance = 19;
 * @return {number}
 */
proto.aruba_telemetry.Sensors.prototype.getCapacitance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.setCapacitance = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Sensors} returns this
 */
proto.aruba_telemetry.Sensors.prototype.clearCapacitance = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Sensors.prototype.hasCapacitance = function() {
  return jspb.Message.getField(this, 19) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Stats.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Stats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Stats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Stats.toObject = function(includeInstance, msg) {
  var f, obj = {
    uptime: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    advCnt: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    seqNr: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    frameCnt: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Stats}
 */
proto.aruba_telemetry.Stats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Stats;
  return proto.aruba_telemetry.Stats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Stats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Stats}
 */
proto.aruba_telemetry.Stats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAdvCnt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSeqNr(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrameCnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Stats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Stats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Stats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Stats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint64 uptime = 1;
 * @return {number}
 */
proto.aruba_telemetry.Stats.prototype.getUptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Stats} returns this
 */
proto.aruba_telemetry.Stats.prototype.setUptime = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Stats} returns this
 */
proto.aruba_telemetry.Stats.prototype.clearUptime = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Stats.prototype.hasUptime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 adv_cnt = 2;
 * @return {number}
 */
proto.aruba_telemetry.Stats.prototype.getAdvCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Stats} returns this
 */
proto.aruba_telemetry.Stats.prototype.setAdvCnt = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Stats} returns this
 */
proto.aruba_telemetry.Stats.prototype.clearAdvCnt = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Stats.prototype.hasAdvCnt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 seq_nr = 3;
 * @return {number}
 */
proto.aruba_telemetry.Stats.prototype.getSeqNr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Stats} returns this
 */
proto.aruba_telemetry.Stats.prototype.setSeqNr = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Stats} returns this
 */
proto.aruba_telemetry.Stats.prototype.clearSeqNr = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Stats.prototype.hasSeqNr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 frame_cnt = 4;
 * @return {number}
 */
proto.aruba_telemetry.Stats.prototype.getFrameCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Stats} returns this
 */
proto.aruba_telemetry.Stats.prototype.setFrameCnt = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Stats} returns this
 */
proto.aruba_telemetry.Stats.prototype.clearFrameCnt = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Stats.prototype.hasFrameCnt = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aruba_telemetry.Inputs.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Inputs.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Inputs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Inputs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Inputs.toObject = function(includeInstance, msg) {
  var f, obj = {
    rockerList: jspb.Message.toObjectList(msg.getRockerList(),
    proto.aruba_telemetry.RockerSwitch.toObject, includeInstance),
    switchindexList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Inputs}
 */
proto.aruba_telemetry.Inputs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Inputs;
  return proto.aruba_telemetry.Inputs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Inputs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Inputs}
 */
proto.aruba_telemetry.Inputs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.aruba_telemetry.RockerSwitch;
      reader.readMessage(value,proto.aruba_telemetry.RockerSwitch.deserializeBinaryFromReader);
      msg.addRocker(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.aruba_telemetry.switchState>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSwitchindex(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Inputs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Inputs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Inputs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Inputs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRockerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.aruba_telemetry.RockerSwitch.serializeBinaryToWriter
    );
  }
  f = message.getSwitchindexList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      2,
      f
    );
  }
};


/**
 * repeated RockerSwitch rocker = 1;
 * @return {!Array<!proto.aruba_telemetry.RockerSwitch>}
 */
proto.aruba_telemetry.Inputs.prototype.getRockerList = function() {
  return /** @type{!Array<!proto.aruba_telemetry.RockerSwitch>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.aruba_telemetry.RockerSwitch, 1));
};


/**
 * @param {!Array<!proto.aruba_telemetry.RockerSwitch>} value
 * @return {!proto.aruba_telemetry.Inputs} returns this
*/
proto.aruba_telemetry.Inputs.prototype.setRockerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.aruba_telemetry.RockerSwitch=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aruba_telemetry.RockerSwitch}
 */
proto.aruba_telemetry.Inputs.prototype.addRocker = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.aruba_telemetry.RockerSwitch, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aruba_telemetry.Inputs} returns this
 */
proto.aruba_telemetry.Inputs.prototype.clearRockerList = function() {
  return this.setRockerList([]);
};


/**
 * repeated switchState switchIndex = 2;
 * @return {!Array<!proto.aruba_telemetry.switchState>}
 */
proto.aruba_telemetry.Inputs.prototype.getSwitchindexList = function() {
  return /** @type {!Array<!proto.aruba_telemetry.switchState>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.aruba_telemetry.switchState>} value
 * @return {!proto.aruba_telemetry.Inputs} returns this
 */
proto.aruba_telemetry.Inputs.prototype.setSwitchindexList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.aruba_telemetry.switchState} value
 * @param {number=} opt_index
 * @return {!proto.aruba_telemetry.Inputs} returns this
 */
proto.aruba_telemetry.Inputs.prototype.addSwitchindex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aruba_telemetry.Inputs} returns this
 */
proto.aruba_telemetry.Inputs.prototype.clearSwitchindexList = function() {
  return this.setSwitchindexList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.VendorData.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.VendorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.VendorData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.VendorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    vendor: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.VendorData}
 */
proto.aruba_telemetry.VendorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.VendorData;
  return proto.aruba_telemetry.VendorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.VendorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.VendorData}
 */
proto.aruba_telemetry.VendorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendor(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.VendorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.VendorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.VendorData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.VendorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string vendor = 1;
 * @return {string}
 */
proto.aruba_telemetry.VendorData.prototype.getVendor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.VendorData} returns this
 */
proto.aruba_telemetry.VendorData.prototype.setVendor = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.VendorData} returns this
 */
proto.aruba_telemetry.VendorData.prototype.clearVendor = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.VendorData.prototype.hasVendor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.aruba_telemetry.VendorData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.aruba_telemetry.VendorData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * required bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.VendorData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.aruba_telemetry.VendorData} returns this
 */
proto.aruba_telemetry.VendorData.prototype.setData = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.VendorData} returns this
 */
proto.aruba_telemetry.VendorData.prototype.clearData = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.VendorData.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aruba_telemetry.Reported.repeatedFields_ = [2,12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aruba_telemetry.Reported.prototype.toObject = function(opt_includeInstance) {
  return proto.aruba_telemetry.Reported.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aruba_telemetry.Reported} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Reported.toObject = function(includeInstance, msg) {
  var f, obj = {
    mac: msg.getMac_asB64(),
    deviceclassList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    model: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    firmware: (f = msg.getFirmware()) && proto.aruba_telemetry.Firmware.toObject(includeInstance, f),
    assetid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    publickey: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    lastseen: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    bevent: (f = msg.getBevent()) && proto.aruba_telemetry.BeaconEvent.toObject(includeInstance, f),
    rssi: (f = msg.getRssi()) && proto.aruba_telemetry.Rssi.toObject(includeInstance, f),
    cell: (f = msg.getCell()) && proto.aruba_telemetry.Cell.toObject(includeInstance, f),
    beaconsList: jspb.Message.toObjectList(msg.getBeaconsList(),
    proto.aruba_telemetry.Beacons.toObject, includeInstance),
    txpower: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    sensors: (f = msg.getSensors()) && proto.aruba_telemetry.Sensors.toObject(includeInstance, f),
    stats: (f = msg.getStats()) && proto.aruba_telemetry.Stats.toObject(includeInstance, f),
    inputs: (f = msg.getInputs()) && proto.aruba_telemetry.Inputs.toObject(includeInstance, f),
    vendordata: (f = msg.getVendordata()) && proto.aruba_telemetry.VendorData.toObject(includeInstance, f),
    vendorname: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    sensortimestamp: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
    flags: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f,
    localname: (f = jspb.Message.getField(msg, 22)) == null ? undefined : f,
    identity: (f = jspb.Message.getField(msg, 23)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aruba_telemetry.Reported}
 */
proto.aruba_telemetry.Reported.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aruba_telemetry.Reported;
  return proto.aruba_telemetry.Reported.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aruba_telemetry.Reported} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aruba_telemetry.Reported}
 */
proto.aruba_telemetry.Reported.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMac(value);
      break;
    case 2:
      var values = /** @type {!Array<!proto.aruba_telemetry.deviceClassEnum>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addDeviceclass(values[i]);
      }
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 4:
      var value = new proto.aruba_telemetry.Firmware;
      reader.readMessage(value,proto.aruba_telemetry.Firmware.deserializeBinaryFromReader);
      msg.setFirmware(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAssetid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublickey(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastseen(value);
      break;
    case 9:
      var value = new proto.aruba_telemetry.BeaconEvent;
      reader.readMessage(value,proto.aruba_telemetry.BeaconEvent.deserializeBinaryFromReader);
      msg.setBevent(value);
      break;
    case 10:
      var value = new proto.aruba_telemetry.Rssi;
      reader.readMessage(value,proto.aruba_telemetry.Rssi.deserializeBinaryFromReader);
      msg.setRssi(value);
      break;
    case 11:
      var value = new proto.aruba_telemetry.Cell;
      reader.readMessage(value,proto.aruba_telemetry.Cell.deserializeBinaryFromReader);
      msg.setCell(value);
      break;
    case 12:
      var value = new proto.aruba_telemetry.Beacons;
      reader.readMessage(value,proto.aruba_telemetry.Beacons.deserializeBinaryFromReader);
      msg.addBeacons(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTxpower(value);
      break;
    case 14:
      var value = new proto.aruba_telemetry.Sensors;
      reader.readMessage(value,proto.aruba_telemetry.Sensors.deserializeBinaryFromReader);
      msg.setSensors(value);
      break;
    case 16:
      var value = new proto.aruba_telemetry.Stats;
      reader.readMessage(value,proto.aruba_telemetry.Stats.deserializeBinaryFromReader);
      msg.setStats(value);
      break;
    case 17:
      var value = new proto.aruba_telemetry.Inputs;
      reader.readMessage(value,proto.aruba_telemetry.Inputs.deserializeBinaryFromReader);
      msg.setInputs(value);
      break;
    case 18:
      var value = new proto.aruba_telemetry.VendorData;
      reader.readMessage(value,proto.aruba_telemetry.VendorData.deserializeBinaryFromReader);
      msg.setVendordata(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendorname(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSensortimestamp(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFlags(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocalname(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Reported.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aruba_telemetry.Reported.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aruba_telemetry.Reported} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aruba_telemetry.Reported.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDeviceclassList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFirmware();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.aruba_telemetry.Firmware.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getBevent();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.aruba_telemetry.BeaconEvent.serializeBinaryToWriter
    );
  }
  f = message.getRssi();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.aruba_telemetry.Rssi.serializeBinaryToWriter
    );
  }
  f = message.getCell();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.aruba_telemetry.Cell.serializeBinaryToWriter
    );
  }
  f = message.getBeaconsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.aruba_telemetry.Beacons.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeSint32(
      13,
      f
    );
  }
  f = message.getSensors();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.aruba_telemetry.Sensors.serializeBinaryToWriter
    );
  }
  f = message.getStats();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.aruba_telemetry.Stats.serializeBinaryToWriter
    );
  }
  f = message.getInputs();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.aruba_telemetry.Inputs.serializeBinaryToWriter
    );
  }
  f = message.getVendordata();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.aruba_telemetry.VendorData.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeUint64(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeString(
      22,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeString(
      23,
      f
    );
  }
};


/**
 * optional bytes mac = 1;
 * @return {!(string|Uint8Array)}
 */
proto.aruba_telemetry.Reported.prototype.getMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes mac = 1;
 * This is a type-conversion wrapper around `getMac()`
 * @return {string}
 */
proto.aruba_telemetry.Reported.prototype.getMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMac()));
};


/**
 * optional bytes mac = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMac()`
 * @return {!Uint8Array}
 */
proto.aruba_telemetry.Reported.prototype.getMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMac()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setMac = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearMac = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasMac = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated deviceClassEnum deviceClass = 2;
 * @return {!Array<!proto.aruba_telemetry.deviceClassEnum>}
 */
proto.aruba_telemetry.Reported.prototype.getDeviceclassList = function() {
  return /** @type {!Array<!proto.aruba_telemetry.deviceClassEnum>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<!proto.aruba_telemetry.deviceClassEnum>} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setDeviceclassList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.aruba_telemetry.deviceClassEnum} value
 * @param {number=} opt_index
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.addDeviceclass = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearDeviceclassList = function() {
  return this.setDeviceclassList([]);
};


/**
 * optional string model = 3;
 * @return {string}
 */
proto.aruba_telemetry.Reported.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setModel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearModel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasModel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Firmware firmware = 4;
 * @return {?proto.aruba_telemetry.Firmware}
 */
proto.aruba_telemetry.Reported.prototype.getFirmware = function() {
  return /** @type{?proto.aruba_telemetry.Firmware} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.Firmware, 4));
};


/**
 * @param {?proto.aruba_telemetry.Firmware|undefined} value
 * @return {!proto.aruba_telemetry.Reported} returns this
*/
proto.aruba_telemetry.Reported.prototype.setFirmware = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearFirmware = function() {
  return this.setFirmware(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasFirmware = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string assetId = 5;
 * @return {string}
 */
proto.aruba_telemetry.Reported.prototype.getAssetid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setAssetid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearAssetid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasAssetid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string publicKey = 6;
 * @return {string}
 */
proto.aruba_telemetry.Reported.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setPublickey = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearPublickey = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasPublickey = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 lastSeen = 7;
 * @return {number}
 */
proto.aruba_telemetry.Reported.prototype.getLastseen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setLastseen = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearLastseen = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasLastseen = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional BeaconEvent bevent = 9;
 * @return {?proto.aruba_telemetry.BeaconEvent}
 */
proto.aruba_telemetry.Reported.prototype.getBevent = function() {
  return /** @type{?proto.aruba_telemetry.BeaconEvent} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.BeaconEvent, 9));
};


/**
 * @param {?proto.aruba_telemetry.BeaconEvent|undefined} value
 * @return {!proto.aruba_telemetry.Reported} returns this
*/
proto.aruba_telemetry.Reported.prototype.setBevent = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearBevent = function() {
  return this.setBevent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasBevent = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Rssi rssi = 10;
 * @return {?proto.aruba_telemetry.Rssi}
 */
proto.aruba_telemetry.Reported.prototype.getRssi = function() {
  return /** @type{?proto.aruba_telemetry.Rssi} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.Rssi, 10));
};


/**
 * @param {?proto.aruba_telemetry.Rssi|undefined} value
 * @return {!proto.aruba_telemetry.Reported} returns this
*/
proto.aruba_telemetry.Reported.prototype.setRssi = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearRssi = function() {
  return this.setRssi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasRssi = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Cell cell = 11;
 * @return {?proto.aruba_telemetry.Cell}
 */
proto.aruba_telemetry.Reported.prototype.getCell = function() {
  return /** @type{?proto.aruba_telemetry.Cell} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.Cell, 11));
};


/**
 * @param {?proto.aruba_telemetry.Cell|undefined} value
 * @return {!proto.aruba_telemetry.Reported} returns this
*/
proto.aruba_telemetry.Reported.prototype.setCell = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearCell = function() {
  return this.setCell(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasCell = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated Beacons beacons = 12;
 * @return {!Array<!proto.aruba_telemetry.Beacons>}
 */
proto.aruba_telemetry.Reported.prototype.getBeaconsList = function() {
  return /** @type{!Array<!proto.aruba_telemetry.Beacons>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.aruba_telemetry.Beacons, 12));
};


/**
 * @param {!Array<!proto.aruba_telemetry.Beacons>} value
 * @return {!proto.aruba_telemetry.Reported} returns this
*/
proto.aruba_telemetry.Reported.prototype.setBeaconsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.aruba_telemetry.Beacons=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aruba_telemetry.Beacons}
 */
proto.aruba_telemetry.Reported.prototype.addBeacons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.aruba_telemetry.Beacons, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearBeaconsList = function() {
  return this.setBeaconsList([]);
};


/**
 * optional sint32 txpower = 13;
 * @return {number}
 */
proto.aruba_telemetry.Reported.prototype.getTxpower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setTxpower = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearTxpower = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasTxpower = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional Sensors sensors = 14;
 * @return {?proto.aruba_telemetry.Sensors}
 */
proto.aruba_telemetry.Reported.prototype.getSensors = function() {
  return /** @type{?proto.aruba_telemetry.Sensors} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.Sensors, 14));
};


/**
 * @param {?proto.aruba_telemetry.Sensors|undefined} value
 * @return {!proto.aruba_telemetry.Reported} returns this
*/
proto.aruba_telemetry.Reported.prototype.setSensors = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearSensors = function() {
  return this.setSensors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasSensors = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Stats stats = 16;
 * @return {?proto.aruba_telemetry.Stats}
 */
proto.aruba_telemetry.Reported.prototype.getStats = function() {
  return /** @type{?proto.aruba_telemetry.Stats} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.Stats, 16));
};


/**
 * @param {?proto.aruba_telemetry.Stats|undefined} value
 * @return {!proto.aruba_telemetry.Reported} returns this
*/
proto.aruba_telemetry.Reported.prototype.setStats = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearStats = function() {
  return this.setStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasStats = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Inputs inputs = 17;
 * @return {?proto.aruba_telemetry.Inputs}
 */
proto.aruba_telemetry.Reported.prototype.getInputs = function() {
  return /** @type{?proto.aruba_telemetry.Inputs} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.Inputs, 17));
};


/**
 * @param {?proto.aruba_telemetry.Inputs|undefined} value
 * @return {!proto.aruba_telemetry.Reported} returns this
*/
proto.aruba_telemetry.Reported.prototype.setInputs = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearInputs = function() {
  return this.setInputs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasInputs = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional VendorData vendorData = 18;
 * @return {?proto.aruba_telemetry.VendorData}
 */
proto.aruba_telemetry.Reported.prototype.getVendordata = function() {
  return /** @type{?proto.aruba_telemetry.VendorData} */ (
    jspb.Message.getWrapperField(this, proto.aruba_telemetry.VendorData, 18));
};


/**
 * @param {?proto.aruba_telemetry.VendorData|undefined} value
 * @return {!proto.aruba_telemetry.Reported} returns this
*/
proto.aruba_telemetry.Reported.prototype.setVendordata = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearVendordata = function() {
  return this.setVendordata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasVendordata = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string vendorName = 19;
 * @return {string}
 */
proto.aruba_telemetry.Reported.prototype.getVendorname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setVendorname = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearVendorname = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasVendorname = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional uint64 sensorTimestamp = 20;
 * @return {number}
 */
proto.aruba_telemetry.Reported.prototype.getSensortimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setSensortimestamp = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearSensortimestamp = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasSensortimestamp = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional uint32 flags = 21;
 * @return {number}
 */
proto.aruba_telemetry.Reported.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setFlags = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearFlags = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional string localName = 22;
 * @return {string}
 */
proto.aruba_telemetry.Reported.prototype.getLocalname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setLocalname = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearLocalname = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasLocalname = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional string identity = 23;
 * @return {string}
 */
proto.aruba_telemetry.Reported.prototype.getIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.setIdentity = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.aruba_telemetry.Reported} returns this
 */
proto.aruba_telemetry.Reported.prototype.clearIdentity = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aruba_telemetry.Reported.prototype.hasIdentity = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * @enum {number}
 */
proto.aruba_telemetry.rockerSwitchPosition = {
  IDLE: 0,
  TOPPRESSED: 1,
  BOTTOMPRESSED: 2
};

/**
 * @enum {number}
 */
proto.aruba_telemetry.CellEvent = {
  ENTRY: 0,
  EXIT: 1,
  UPDATE: 2,
  AGEOUT: 3
};

/**
 * @enum {number}
 */
proto.aruba_telemetry.AccelStatus = {
  OK: 0,
  OUTOFRANGE: 1,
  THRESHOLD1: 2,
  THRESHOLD2: 3
};

/**
 * @enum {number}
 */
proto.aruba_telemetry.Alarm = {
  WATER: 1,
  SMOKE: 2,
  FIRE: 3,
  GLASSBREAK: 4,
  INTRUSION: 5
};

/**
 * @enum {number}
 */
proto.aruba_telemetry.ContactPosition = {
  OPEN: 1,
  CLOSED: 2
};

/**
 * @enum {number}
 */
proto.aruba_telemetry.MechanicalH = {
  UPTORIGHT: 1,
  RIGHTTODOWN: 2,
  DOWNTOLEFT: 3,
  LEFTTOUP: 4,
  UPTOLEFT: 5,
  LEFTTODOWN: 6,
  DOWNTORIGHT: 7,
  RIGHTTOUP: 8
};

/**
 * @enum {number}
 */
proto.aruba_telemetry.switchState = {
  UNKNOWN: 1,
  ON: 2,
  OFF: 3
};

goog.object.extend(exports, proto.aruba_telemetry);
